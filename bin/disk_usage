#!/bin/bash

################################################################################
# Generic Flow v5.1 (May 2023)
################################################################################
#
# Copyright 2011-2023 Gennady Kirpichev (https://github.com/32xlr8/gflow.git)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################
# Filename: bin/disk_usage
# Purpose:  Report size of the most heavy directories
################################################################################

GF_TOOL_PATH="$(readlink -m "$0/..")"
GF_TOOL_NAME="$(basename "$0")"

# Load common procedures
source "$GF_TOOL_PATH/gflow" -fatal_exit 2> /dev/null
[[ $? != 0 ]] && echo -e "\n\e[31;41m \e[0m Required Generic Flow binary \e[1m$GF_BIN\e[0m not found\n" && exit 1

gf_echo "
##################################
#  Utility to report disk usage  #
##################################
"; GF_IS_SPACE=1

GF_TOOL_USAGE="\e[36;46m \e[0m Usage:

  \e[34;44m#\e[0m To report disk usage:
    $GF_TOOL_NAME <directory>
    
  \e[34;44m#\e[0m Full syntax:
    $GF_TOOL_NAME {[-i|-in] <directory>} [-o|-out <file>] \\
        [-t|-threshold <value>] [-d|-depth <value>] [-x|-exclude <regexp>] \\
        [-c|-cache <file> [-no_update|-reset_cache]]
    
\e[36;46m \e[0m Command line arguments:

    -i, -in <directory>     directory to report disk usage
    -o, -out <file>         write out disk usage report to file

    -t, -threshold <value>  display threshold in gigabytes (default is 5G)
    
    -d, -depth <value>      limit directory scan depth
    -x, -exclude <regexp>   exclude file names matching regexp from disk usage check

    -c, -cache <file>       cache file to to speed up disk usage check in the future
    -n, -no_update          skip directory scan and dump cached report only
    -r, -reset_cache        clear cached and rescan directories
"

##################################################
# Process options
##################################################

GF_SEARCH_DIRS=
GF_OUT_REPORT=

GF_MAX_DEPTH=
GF_THRESHOLD=5
GF_EXCLUDE=

GF_CACHE_FILE=
GF_CACHE_UPDATE=YES

# Parse command line
gf_last_key=
while [ $# -gt 0 ]; do
    if [[ "$1" != -* ]]; then key="$gf_last_key"; else key=; fi
    if [ -z "$key" ]; then key="$1"; shift; fi
    gf_last_key=; case "$key" in
        -i|-in )
            if [ -z "$1" ]; then
                gf_fatal "Argument \e[1m$key\e[0m requires existing file or directory"
            elif [ -d "$1" ]; then
                gf_last_key="$key"
                GF_SEARCH_DIRS+="$(gf_full_path "$1")"$'\n'
            else
                gf_fatal "Search directory or file \e[1m$1\e[0m does not exist"
            fi
            shift
        ;;
        -o|-out )
            if [ -n "$1" ]; then
                if [ -d "$1" ]; then
                    gf_fatal "Argument \e[1m$key\e[0m requires new file name, not a directory"
                else
                    GF_OUT_REPORT="$1"
                fi
            else
                gf_fatal "Argument \e[1m$key\e[0m requires new file name"
            fi
            shift
        ;;
        -t|-threshold )
            if [[ $1 =~ ^[0-9][\.0-9]*$ ]]; then
                GF_THRESHOLD="$1"
            else
                gf_fatal "Argument \e[1m$key\e[0m requires a number"
            fi
            shift
        ;;
        -d|-depth )
            if [[ $1 =~ ^[0-9][0-9]*$ ]]; then
                GF_MAX_DEPTH="$1"
            else
                gf_fatal "Argument \e[1m$key\e[0m requires a number"
            fi
            shift
        ;;
        -x|-exclude )
            gf_last_key="$key"
            if [ -n "$1" ]; then
                GF_EXCLUDE+="$1"$'\n'
            else
                gf_fatal "Argument \e[1m$key\e[0m requires regexp"
            fi
            shift
        ;;
        -c|-cache )
            GF_CACHE_FILE="$1"
            shift
        ;;
        -n|-no_update )
            GF_CACHE_UPDATE=NO
        ;;
        -r|-reset_cache )
            GF_CACHE_UPDATE=CLEAR
        ;;
        -h|-help )
            gf_echo_spaced -e "$GF_TOOL_USAGE"
            exit 0
        ;;
        * )
            if [ -d "$key" ]; then
                GF_SEARCH_DIRS+="$(gf_full_path "$key")"$'\n'
            elif [[ $key =~ ^[0-9][\.0-9]*$ ]]; then
                GF_THRESHOLD="$key"
            else
                gf_fatal "Directory \e[1m$key\e[0m does not exist"
            fi
        ;;
    esac
done

##################################################
# Check and dump options
##################################################

GF_SEARCH_DIRS="$(echo "$GF_SEARCH_DIRS" | awk '!x[$0]++')"

# Check important options
if [ -z "$GF_SEARCH_DIRS" ]; then
    gf_echo_spaced -e "$GF_TOOL_USAGE"
    if [ -n "$GF_CACHE_FILE" -a  "$GF_CACHE_UPDATE" == "NO" ]; then
        GF_SEARCH_DIRS="/"
    else
        GF_SEARCH_DIRS="$PWD"
    fi
    # gf_fatal "No directory specified"
fi

if [ -n "$GF_SEARCH_DIRS" ]; then
    gf_info "Directories to \e[1mcheck disk size\e[0m in:"
    echo "$GF_SEARCH_DIRS" | >&2 sed -e 's/^/  /g'; >&2 echo
fi

if [ -n "$GF_CACHE_FILE" ]; then
    gf_info "Cache file:"
    >&2 echo "  $GF_CACHE_FILE"; >&2 echo
fi

gf_info "Display size \e[1mthreshold\e[0m: ${GF_THRESHOLD}G"; echo

if [ -n "$GF_EXCLUDE" ]; then
    gf_info "Regexp patterns to \e[1mexclude\e[0m directories from search:"
    for word in $GF_EXCLUDE; do >&2 echo "  $word"; done; echo
fi

if [ -n "$GF_MAX_DEPTH" ]; then
    gf_info "Search directory \e[1mscan depth limited\e[0m to \e[1m$GF_MAX_DEPTH\e[0m levels"; echo
fi

GF_IS_SPACE=1

##################################################
# Perl scripts
##################################################

# Scan directories for files and symlinks
gf_get_directory_sizes='
    '"$gf_fix_regexp_pattern_perl"'
    my @results; my %results;
    my @links;
    my $start_time = time;
    while (<STDIN>) {
        s/\s+$//;
        if (/^:::([A-Z]+):::$/) {
            $type = $1;
        } elsif ($type eq "DEPTH") {
            $data{$type} = $_;
        } elsif (($type eq "DIRS") || ($type eq "SIZES")) {
            push @{$data{$type}}, $_;
        } elsif ($type eq "EXCLUDE") {
            push @{$data{$type}}, fix_regexp_pattern($1) while (s/(\S+)//);        }
    }
    my $max_depth = $data{DEPTH}; $max_depth = "" if ($max_depth =~ /[^\d]/);
    '"$gf_print_status_perl"'
    my %sizes; my %modified; my %processed; my %ok; my %index;
    my $checked = 0; my @updated;
    sub scan_directory {
        my $dir = shift;
        my $depth = shift;
        $dir =~ s:/*\s*$::;
        my $include = 1; foreach my $pattern (@{$data{EXCLUDE}}) { $include = 0 if ($dir =~ m|$pattern|); }
        if ($include && (!defined $processed{$dir})) {
            my $is_check = 0;
            foreach my $subdir (keys %index) {
                if ($subdir."/" eq substr($dir."/", 0, length($subdir)+1)) {
                    $is_check = 1;
                    last;
                }
            }
            if ($is_check) {
                if ((!-l $dir) && (-d $dir)) {
                    $checked++;
                    if (my @stat = stat "$dir") {
                        $ok{$dir} = 1;
                        print_status "$dir";
                        if ($stat[9] ne $modified{$dir}) {
                            push @updated, $dir;
                            if (opendir DIR, $dir) {
                                my @files = readdir DIR;
                                closedir DIR;
                                my $size = 0;
                                foreach my $file (@files) {
                                    if (($file ne "..") && ($file ne ".")) {
                                        my $path = $dir."/".$file;
                                        if (!-l $path) {
                                            if (-f $path) {
                                                if (my @stat = stat "$path") {
                                                    $size += $stat[7];
                                                }
                                            } else {
                                                scan_directory($path, $depth+1) if (($max_depth eq "") || ($depth < $max_depth));
                                            }
                                        }
                                    }
                                }
                                $sizes{$dir} = $size;
                                $modified{$dir} = $stat[9];
                            } else {
                                print STDERR "\e[0J\e[31;41m \e[0m Cannot read \e[1m".$dir."\e[0m directory\n";
                            }
                        }
                    }
                }
            } else {
                $ok{$dir} = 1;
            }
        }
        $processed{$dir} = 1;
    }
    foreach (@{$data{SIZES}}) {
        if (s/\s+(\d+)\s+(\d+)$//) {
            $sizes{$_} = $1;
            $modified{$_} = $2;
        }
    }
    foreach (@{$data{DIRS}}) {
        $_ = `readlink -m "$_"`;
        '"$gf_simplify_path_perl"'
        $sizes{$_} = 0;
        $index{$_} = 1;
    }
    scan_directory($_, 0) foreach (keys %sizes);
    print STDERR "\e[0J";
    if ($#updated < 20) { print STDERR "\e[34m|\e[0m ".$_."\n" foreach (@updated); }
    print STDERR "\e[34;44m \e[0m Total \e[1m".($#updated+1)."\e[0m of \e[1m$checked\e[0m directories updated in \e[1m".(time()-$start_time)."\e[0m seconds\n"
;
    foreach (sort keys %sizes) {
        print $_." ".($sizes{$_})." ".($modified{$_})."\n" if ($ok{$_});
    }
'

# Print ordered results
gf_print_directory_sizes='
    my %sizes; my %index;
    my $is_sizes = 0;
    while (<STDIN>) {
        if ($is_sizes) {
            if (s/\s+(\d+)\s+(\d+)\s*$//) {
                my $size = $1;
                $_ .= "/"; $sizes{$_} += $size while (s:/[^/]*$::);
            }
        } elsif (/^:::SIZES:::$/) {
            $is_sizes = 1;
        } else {
            $_ = `readlink -m "$_"`;
            '"$gf_simplify_path_perl"'
            $index{$_} = 1;
        }
    }
    my %displayed;
    my @sorted_dirs = sort({($sizes{$b}<=>$sizes{$a}) || (length($a)<=>length($b))} keys %sizes);
    my $threshold = '"$GF_THRESHOLD"';
    sub display_dir {
        my $dir = shift;
        my $indent = shift;
        my $results = "";
        if (!$displayed{$dir}) {
            $displayed{$dir} = 1;
            my $size = sprintf( "%-6s", sprintf("%.1fG", $sizes{$dir}/1024.0/1024.0/1024.0) );
            if (($size >= $threshold) || ($indent eq "")) {
               if ($size >= 4*$threshold) {
                    $results .= $indent."\e[31;41m \e[0m ".$size." ".$dir." "."\n";
                } elsif ($size >= 2*$threshold) {
                    $results .= $indent."\e[33;43m \e[0m ".$size." ".$dir." "."\n";
                } elsif ($size >= $threshold) {
                    $results .= $indent."\e[32;42m \e[0m ".$size." ".$dir." "."\n";
                } else {
                    $results .= $indent."\e[34;44m \e[0m ".$size." ".$dir." "."\n";
                }
                my @subdirs;
                my $subresults = "";
                my $counter = 0;
                foreach my $subdir (@sorted_dirs) {
                    if ($dir."/" eq substr($subdir, 0, length($dir)+1)) {
                        my $subresult = display_dir($subdir, $indent."| ");
                        $counter++ if ($subresult);
                        $subresults .= $subresult;
                    }
                }
                if ($counter == 1) {
                    $subresults =~ s/^\| //gm;
                    $results = $subresults;
                } elsif ($counter > 1) {
                    $results .= $subresults;
                }
            }
        }
        return $results;
    }
    my $root_dir = "";
    my $last_dir = "";
    my %count;
    foreach my $dir (sort {$sizes{$b}<=>$sizes{$a}} keys %index) {
        foreach (split "\n", display_dir($dir, "")) {
            s:\s*$::g;
            if (m:^([^/\e]*)([^/]*)(/.*/[^/]*)$:) {
                my $space = $1;
                my $mark = $2;
                my $dir = $3;
                my $result = "";
                $count{$1}++ if ($mark =~ /...(\d)/);
                if ($last_dir eq "") {
                    $result = "\e[1m$dir\e[0m";
                } else {
                    my @last_dir = split ("/", $last_dir);
                    my @dir = split ("/", $dir);
                    my $depth = $#last_dir; $depth = $#dir if ($depth > $#dir);

                    my $common_dir = ""; 
                    my $rest_dir = "";

                    my $i=0; 
                    my $mismatch = 0;
                    while ($i<=$depth) {
                        if ($dir[$i] ne "") {
                            if ($last_dir[$i] eq $dir[$i]) {
                                if ($mismatch > 0) {
                                    $rest_dir .= "/".$dir[$i];
                                } else {
                                    $common_dir .= "/".$dir[$i];
                                }
                            } else {
                                $rest_dir .= "/\e[1m".$dir[$i]."\e[0m";
                                $mismatch++;
                            }
                        }
                        $i++;
                    }
                    if ($common_dir ne $root_dir) {
                        $space .= "|\n$space" if ($mismatch > 0);
                        $root_dir = $common_dir;
                    }
                    while ($i<=$#dir) {
                        $rest_dir .= "/\e[1m".$dir[$i]."\e[0m";
                        $i++;
                    }
                    $rest_dir =~ s:\e\[0m(/)?\e\[1m:$1:g;
                    $result = $common_dir.$rest_dir;
                    $result =~ s:/{2,}:/:;
                }
                $last_dir = $dir;
                print "\e[34m".$space."\e[0m".$mark.$result."\n";
            } else {
                print $_."\n";
            }
        }
    }
    if ($count{1}+$count{2}+$count{3}+$count{4} > 1) {
        print "\e[34m|\e[0m\n";
        print "\e[31;41m \e[0m ".($count{1})." directories with more than ".(4*'$GF_THRESHOLD')."G size\n" if ($count{1});
        print "\e[33;43m \e[0m ".($count{3})." directories with ".(2*'$GF_THRESHOLD')."G .. ".(4*'$GF_THRESHOLD')."G size\n" if ($count{3});
        print "\e[32;42m \e[0m ".($count{2})." directories with ".(1*'$GF_THRESHOLD')."G .. ".(2*'$GF_THRESHOLD')."G size\n" if ($count{2});
        print "\e[34;44m \e[0m ".($count{4})." directories with less than ".(1*'$GF_THRESHOLD')."G size\n" if ($count{4});
    }
'

##################################################
# Process source directory
##################################################
gf_spacer

# Read in results
gf_cached_sizes=
if [ -n "$GF_CACHE_FILE" ]; then
    if [ -e "$GF_CACHE_FILE" -a "$GF_CACHE_UPDATE" != "CLEAR" ]; then
        gf_operation "Reading cached data ..."
        gf_cached_sizes="$(cat "$GF_CACHE_FILE" 2>/dev/null)"$'\n'
        gf_result "Total \e[1m$(gf_count_lines "$gf_cached_sizes")\e[0m directories read"
        gf_spacer
    fi
fi

# Get directory sizes from cache
if [ "$GF_CACHE_UPDATE" == "NO" ]; then
    gf_sizes="$gf_cached_sizes"

# Get actual directory sizes
elif [ -n "$GF_SEARCH_DIRS" ]; then
    gf_operation "Analyzing directories ..."
    gf_sizes="$(echo ":::DIRS:::"$'\n'"$GF_SEARCH_DIRS"$'\n'":::SIZES:::"$'\n'"$gf_cached_sizes"$'\n'":::DEPTH:::"$'\n'"$GF_MAX_DEPTH"$'\n'":::EXCLUDE:::"$'\n^\s*$\n'"$GF_EXCLUDE" | perl -e "$gf_get_directory_sizes" 2> /dev/tty)"
    gf_spacer
fi

##################################################
# Report directory size
##################################################
gf_spacer

gf_set_progress "Calculating directory sizes ..."
gf_result="$(echo "$GF_SEARCH_DIRS"$'\n:::SIZES:::\n'"$gf_sizes"$'\n' | perl -e "$gf_print_directory_sizes")"
gf_reset_progress
gf_spacer

echo "$gf_result"
echo

# Write out results
if [ "$GF_CACHE_UPDATE" != "NO" -a -n "$GF_CACHE_FILE" ]; then
    gf_set_progress "Checking cache ..."
    sum1=$(echo $gf_sizes | md5sum)
    sum2=$(echo $gf_cached_sizes | md5sum)
    gf_reset_progress
    if [ "$GF_CACHE_UPDATE" == "CLEAR" -o "$sum1" != "$sum2" ]; then
        gf_operation "Writing cache data ..."
        echo "$gf_sizes" > "$GF_CACHE_FILE"
        gf_result "$(readlink -m "$GF_CACHE_FILE")"
        gf_result "Total \e[1m$(gf_count_lines "$gf_sizes")\e[0m cached directories written"
        gf_spacer
    fi
fi

if [ -n "$GF_OUT_REPORT" ]; then
    gf_operation "Writing out disk usage report ..."
    echo "$gf_result" | sed -e $'s:\e\[[0-9;]\+m ::g;s:\e\[[0-9;]\+m::g' > "$GF_OUT_REPORT"
    gf_result "$(readlink -m "$GF_OUT_REPORT")"
    gf_spacer
fi
