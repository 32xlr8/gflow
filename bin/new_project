#!/bin/bash

################################################################################
# Generic Flow v5.0 (February 2023)
################################################################################
#
# Copyright 2011-2023 Gennady Kirpichev (https://github.com/32xlr8/gflow.git)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################
# File name: bin/new_project
# Purpose:   Utility to create environment for new digital project
################################################################################

GF_TOOL_PATH="$(readlink -m "$0/..")"
GF_TOOL_NAME="$(basename "$0")"

# Load common procedures
source "$GF_TOOL_PATH/gflow" -fatal_exit 2> /dev/null
[[ $? != 0 ]] && echo -e "\n\e[31;41m \e[0m Required Generic Flow binary \e[1m$GF_BIN\e[0m not found\n" && exit 1

if [ -z "$GF_NO_INTRO" ]; then
gf_echo "
#################################################
#  Utility to create new project from template  #
#################################################
"; GF_IS_SPACE=1

GF_TOOL_USAGE="\e[36;46m \e[0m Usage:

  \e[34;44m#\e[0m Full syntax:
    $GF_TOOL_NAME [-p|-project] <project> [-b|-blocks <block> ...] [-t|-tools <tool> ...] [-f|-flows <flow>] [-r|-ref <directory>]
    
  \e[36;46m \e[0m Command line arguments:

    -p, -project <project>  project directory to create
    -b, -blocks <block>     block names to create in project directory
    -t, -tools <tool>       tools to create in project directory
    -f, -flows <flow>       flows to create in block directory
    -r, -ref <directory>    reference project/block directory to reuse settings
"

##################################################
# Process options
##################################################

GF_PROJECT_DIR=
GF_BLOCKS=
GF_TOOLS=
GF_FLOWS=
GF_REF_DIR=

# Parse command line
gf_last_key=
while [ $# -gt 0 ]; do
    if [[ "$1" != -* ]]; then key="$gf_last_key"; else key=; fi
    if [ -z "$key" ]; then key="$1"; shift; fi
    gf_last_key=; case "$key" in
        -p|-project )
            gf_last_key=""
            if [ -z "$1" ]; then
                gf_fatal "Argument \e[1m$key\e[0m requires project name"
            else
                GF_PROJECT_DIR="$(gf_full_path "$1")"
            fi
            shift
        ;;
        -b|-block|-blocks )
            gf_last_key="$key"
            if [ -z "$1" ]; then
                gf_fatal "Argument \e[1m$key\e[0m requires block name"
            else
                if [[ $1 =~ ^[\\.0-9a-zA-Z_-]*$ ]]; then
                    GF_BLOCKS+="$1"$'\n'
                else
                    gf_fatal "Block name \e[1m$1\e[0m contains forbidden characters"
                fi
            fi
            shift
        ;;
        -t|-tool|-tools )
            gf_last_key="$key"
            if [ -z "$1" ]; then
                gf_fatal "Argument \e[1m$key\e[0m requires tool name"
            else
                if [[ $1 =~ ^[\\.0-9a-zA-Z_-]*$ ]]; then
                    GF_TOOLS+="$1"$'\n'
                else
                    gf_fatal "Tool name \e[1m$1\e[0m contains forbidden characters"
                fi
            fi
            shift
        ;;
        -f|-flow|-flows )
            gf_last_key="$key"
            if [ -z "$1" ]; then
                gf_fatal "Argument \e[1m$key\e[0m requires flow name"
            else
                if [[ $1 =~ ^[\\.0-9a-zA-Z_-]*$ ]]; then
                    GF_FLOWS+="$(basename "$1" .gf)"$'\n'
                else
                    gf_fatal "Flow name \e[1m$1\e[0m contains forbidden characters"
                fi
            fi
            shift
        ;;
        -r|-ref )
            if [ -z "$1" ]; then
                gf_fatal "Argument \e[1m$key\e[0m requires existing directory"
            elif [ -d "$1" ]; then
                GF_REF_DIR="$(gf_full_path "$1")"
            else
                gf_fatal "Project directory \e[1m$1\e[0m does not exist"
            fi
            shift
        ;;
        -h|-help )
            gf_echo_spaced -e "$GF_TOOL_USAGE"
            exit 0
        ;;
        * )
            if [ -z "$GF_PROJECT_DIR" ]; then
                if [[ $key =~ ^[\\.0-9a-zA-Z_-]*$ ]]; then
                    GF_PROJECT_DIR="$(gf_full_path "$key")"
                else
                    gf_fatal "Project name \e[1m$key\e[0m contains forbidden characters"
                fi
            else
                gf_fatal "Incorrect \e[1m$key\e[0m option"
            fi
        ;;
    esac
done

GF_NO_INTRO=1
fi

##################################################
# Check and dump options
##################################################

# Check project directory
if [ -z "$GF_PROJECT_DIR" ]; then
    gf_echo_spaced -e "$GF_TOOL_USAGE"
    gf_fatal "No project directory specified"
fi

gf_info "Project directory:"
echo "$GF_PROJECT_DIR" | sed -e 's/^/  /g'; echo

# Check reference project directory
if [ -n "$GF_REF_DIR" ]; then
    tmp="$GF_REF_DIR"
    while [ ! -e "$tmp/block.common.gf" -a "$tmp" != "/" ]; do
        tmp="$(dirname "$tmp")"
    done
    if [ -e "$tmp/block.common.gf" ]; then
        GF_REF_BLOCK_DIR="$tmp"
        gf_info "Reference block directory:"
        echo "$GF_REF_BLOCK_DIR" | sed -e 's/^/  /g'; echo
        if [ -e "$GF_REF_BLOCK_DIR/../../project.common.gf" ]; then
            GF_REF_PROJECT_DIR="$(gf_full_path "$GF_REF_BLOCK_DIR/../..")"
            gf_info "Reference project directory:"
            echo "$GF_REF_PROJECT_DIR" | sed -e 's/^/  /g'; echo
        fi
    fi
    if [ -z "$GF_REF_PROJECT_DIR" ]; then
        tmp="$GF_REF_DIR"
        while [ ! -e "$tmp/project.common.gf" -a "$tmp" != "/" ]; do
            tmp="$(dirname "$tmp")"
        done
        if [ -e "$tmp/project.common.gf" ]; then
            GF_REF_PROJECT_DIR="$tmp"
            gf_info "Reference project directory:"
            echo "$GF_REF_PROJECT_DIR" | sed -e 's/^/  /g'; echo
        fi
    fi
    if [ -z "$GF_REF_PROJECT_DIR" ]; then
        gf_fatal "Reference ${GFCB}$GF_REF_DIR${GFC0} is not a project directory"
    fi
    if [ -z "$GF_REF_BLOCK_DIR" ]; then
        GF_REF_BLOCK_DIR="$GF_REF_PROJECT_DIR/blocks/*"
    fi
fi

if [ -n "$GF_TOOLS" ]; then
    gf_info "Tools to create in project directory:"
    for word in $GF_TOOLS; do echo "  $word"; done; echo
fi

if [ -n "$GF_BLOCKS" ]; then
    gf_info "Blocks to create in project directory:"
    for word in $GF_BLOCKS; do echo "  $word"; done; echo
fi

if [ -n "$GF_FLOWS" ]; then
    if [ -n "$GF_BLOCKS" ]; then
        gf_info "Flows to create in blocks directories:"
        for word in $GF_FLOWS; do echo "  $word"; done; echo
    else
        gf_fatal "Blocks to create flows in are not specified"
    fi
fi

GF_IS_SPACE=1

##################################################
# File procedures
##################################################

function get_file_variants {
    base="$1"
    base=${base%.gf}
    if [ "$base" != "$1" ]; then
        if [[ "$(basename "$base")" == *.* ]]; then
            base+=".*gf"
        else
            base="$1"
        fi
    fi
    name=${base##*/}
    if [ "$base" != "${base#tools/}" ]; then
        echo "
            $GF_PROJECT_DIR/../*/tools/$name
            $GF_PROJECT_DIR/gflow/templates/*/$name
        "
    elif [ "$base" != "${base#blocks/}" ]; then
        echo "
            $GF_PROJECT_DIR/../*/blocks/*/$name
            $GF_PROJECT_DIR/gflow/templates/*/blocks/*/$name
        "
    else
        echo "
            $GF_PROJECT_DIR/../*/$base
            $GF_PROJECT_DIR/gflow/$base
            $GF_PROJECT_DIR/gflow/templates/*/$base
        "
    fi
}

function update_and_follow_file {
    local from_dir="$(gf_full_path "$1")"
    local to_dir="$(gf_full_path "$2")"
    local from_file="$(gf_full_path_rel "$from_dir" "$3")"
    local to_file="$(gf_full_path_rel "$to_dir" "$4")"
    local need_follow="$5"
    
    local short_file=${to_file#$GF_PROJECT_DIR/}
    
    gf_spacer
    if [ "$to_file" == "$short_file" ]; then
        to_file="$(gf_full_path_rel "$GF_PROJECT_DIR/blocks/$GF_BLOCK_NAME" "$4")"
        short_file=${to_file#$GF_PROJECT_DIR/}
        update_file "$need_follow" "$GF_PROJECT_DIR" "$short_file" "$(get_file_variants "$short_file")"

    elif [ -e "$to_file" ]; then
        gf_info "./${GFCB}$short_file${GFC0}"$'\n'"Already exists"
        
    elif [ -e "$from_file" ]; then
        mkdir -p "$(dirname "$to_file")"
        cp "$from_file" "$to_file"
        chmod ug+w "$to_file"
        gf_message "22 " "./${GFCB}$short_file${GFC0}"$'\n'"$from_file"
        NEW_FILES+="$to_file"$'\n'
        
        if [ "$need_follow" == 1 ]; then
            local files="$(cat "$to_file" | perl -e "$gf_parse_bash_perl"'
                my @commands; push @commands, "";
                my $command = "";
                foreach (my $i=0; $i<=$#results; $i++) {
                    my $text = $results[$i]{text};
                    if ($results[$i]{char} eq "z") {
                        while ($text =~ s/^([^\n]*)\n//m) {
                            $commands[$#commands] .= $1;
                            push @commands, "";
                        }
                    }
                    $commands[$#commands] .= $text;
                }
                foreach my $command (@commands) {
                    if ($command =~ s/^\s*gf_source\s+//) {
                        $command =~ s/^\s*\"(.*)\"$\s*/$1/;
                        $command =~ s/^\s*\'"'"'(.*)\'"'"'$\s*/$1/;
                        print "$command\n";
                    }
                }
            ' 2> /dev/null | sed -e "s|\$GF_ROOT/|$GF_PROJECT_DIR/gflow/|g")"
            
            for follow_file in $files; do
                update_and_follow_file "$from_dir" "$to_dir" "$follow_file" "$follow_file" 1
            done
        fi
    else
        to_file="$(gf_full_path_rel "$GF_PROJECT_DIR/blocks/$GF_BLOCK_NAME" "$4")"
        short_file=${to_file#$GF_PROJECT_DIR/}
        update_file "$need_follow" "$GF_PROJECT_DIR" "$short_file" "$(get_file_variants "$short_file")"
    fi
    gf_spacer
}

function update_file {
    local need_follow="$1"; shift
    local to_dir="$1"; shift
    local to_file="$1"; shift;
    local full_file="$(gf_full_path_rel "$to_dir" "$to_file")"

    gf_spacer
    local short_file=${full_file#$GF_PROJECT_DIR/};
    if [ "$full_file" == "$short_file" ]; then
        gf_error "${GFCB}$short_file${GFC0}"$'\n'"External file"
        
    elif [ -e "$full_file" ]; then
        gf_info "./${GFCB}$short_file${GFC0}"$'\n'"Already exists"
        
    else
        local found_file="$GF_REF_DIR/$to_file"
        if [ ! -e "$GF_REF_DIR/$to_file" ]; then
            found_file=
            local variants=
            [[ -n "$GF_REF_DIR" ]] && variants=$(ls -1tr "$GF_REF_DIR"/$to_file 2> /dev/null)
            while [ -n "$1" ]; do
                local from_patterns="$1"; shift
                if [ -z "$variants" ]; then
                    variants=$(gf_relative_path "$GF_PROJECT_DIR" "$(ls -1tr $from_patterns 2> /dev/null)")
                fi
            done
            if [ -n "$variants" ]; then
                gf_choose_file_dir_task -var found_file -relative "$GF_PROJECT_DIR" -prompt "Please select ./${GFCB}$short_file${GFC0} reference:" -files "$variants"
            fi
        fi
        if [ -z "$found_file" ]; then
            gf_error "./${GFCB}$short_file${GFC0}"$'\n'"No templates found"
        else
            update_and_follow_file "$found_file/.." "$full_file/.." "$(basename "$found_file")" "$(basename "$full_file")" "$need_follow"
        fi
    fi
    gf_spacer
}

##################################################
# Main script
##################################################
NEW_FILES=

# Block name for relative paths
GF_BLOCK_NAME=-

mkdir -p "$GF_PROJECT_DIR"/{project_data,blocks}

gf_operation "Updating ${GFCB}$GF_PROJECT_DIR${GFC0} project directory"; gf_spacer

# Copy gflow directory
if [ -e "$GF_PROJECT_DIR/gflow" ]; then
    gf_info "./${GFCB}gflow${GFC0}"$'\n'"Already exists"
else
    cp -R "$GF_ROOT" "$GF_PROJECT_DIR/gflow"
    gf_info "./${GFCB}gflow${GFC0}/"$'\n'"$GF_ROOT/"
    NEW_FILES+="$GF_PROJECT_DIR/gflow/"$'\n'
fi

# Copy tool-specific scripts
mkdir -p "$GF_PROJECT_DIR"/tools
for tool in $GF_TOOLS; do
    update_file 0 "$GF_PROJECT_DIR" "tools/gflow_plugin.$tool.gf" "
        $GF_PROJECT_DIR/../*/tools/gflow_plugin.$tool.gf
        $GF_PROJECT_DIR/gflow/templates/*/gflow_plugin.$tool.gf
        $GF_REF_PROJECT_DIR/tools/gflow_plugin.$tool.gf
    "
done
for tool in gconfig $GF_TOOLS; do
    update_file 0 "$GF_PROJECT_DIR" "tools/tool_steps.$tool.gf" "
        $GF_PROJECT_DIR/../*/tools/tool_steps.$tool.*gf
        $GF_PROJECT_DIR/gflow/templates/*/tool_steps.$tool.*gf
        $GF_REF_PROJECT_DIR/tools/tool_steps.$tool.*gf
    "
done

# Copy technology-specific scripts
# mkdir -p "$GF_PROJECT_DIR"/technology
for tool in common $GF_TOOLS; do
    update_file 1 "$GF_PROJECT_DIR" "technology.$tool.gf" "
        $GF_PROJECT_DIR/../*/technology.$tool.*gf
        $GF_PROJECT_DIR/gflow/templates/*/technology.$tool.*gf
        $GF_REF_PROJECT_DIR/technology.$tool.*gf
    "
done

# Copy project-specific scripts
for tool in common $GF_TOOLS; do
    update_file 1 "$GF_PROJECT_DIR" "project.$tool.gf" "
        $GF_PROJECT_DIR/../*/project.$tool.*gf
        $GF_PROJECT_DIR/gflow/templates/*/project.$tool.*gf
        $GF_REF_PROJECT_DIR/project.$tool.*gf
    "
done

# Block-specific data
for GF_BLOCK_NAME in $GF_BLOCKS; do
    GF_BLOCK_DIR="$GF_PROJECT_DIR/blocks/$GF_BLOCK_NAME"

    gf_operation "Updating ${GFCB}$GF_BLOCK_DIR${GFC0} block directory"; gf_spacer
    mkdir -p "$GF_BLOCK_DIR"/data/{floorplans,netlists,constraints}

    # Copy block-specific scripts
    for tool in common $GF_TOOLS; do
        update_file 1 "$GF_PROJECT_DIR" "blocks/$GF_BLOCK_NAME/block.$tool.gf" "
            $GF_PROJECT_DIR/../*/blocks/*/block.$tool.*gf
            $GF_BLOCK_DIR/../*/block.$tool.*gf
            $GF_PROJECT_DIR/gflow/templates/*/blocks/*/block.$tool.*gf
            $GF_REF_BLOCK_DIR/block.$tool.gf
        "
    done

    # Copy block-specific flows
    for flow in $GF_FLOWS; do
        update_file 1 "$GF_PROJECT_DIR" "blocks/$GF_BLOCK_NAME/$flow.gf" "
            $GF_PROJECT_DIR/../*/blocks/*/$flow.gf
            $GF_BLOCK_DIR/../*/$flow.gf
            $GF_PROJECT_DIR/gflow/templates/*/blocks/*/$flow.gf
            $GF_REF_BLOCK_DIR/$flow.gf
        "
    done

done

# Ask for the flow to install
if [ "$GF_FLOW_REQUIRED" == 1 -a -z "$GF_FLOWS" ]; then
    all_flows=$(ls -1tr "$GF_REF_BLOCK_DIR"/*.gf "$GF_PROJECT_DIR"/../*/blocks/*/*.gf "$GF_PROJECT_DIR"/gflow/templates/*/blocks/*/*.gf 2> /dev/null)
    current_flows=$(ls -1tr "$GF_BLOCK_DIR"/*.gf 2> /dev/null)
    flows=$(echo "$all_flows"$'\n=\n'"$current_flows" | perl -e '
        my %flows; my @flows;
        my $is_current = 0;
        while (<STDIN>) {
            s|^.*/||g;
            s|\.gf$||;
            s|\s+$||g;
            if ($_ eq "=") {
                $is_current = 1;
            } else {
                push @flows, $_ if (!defined $flows{$_});
                $flows{$_} = $is_current;
            }
        }
        foreach (@flows) {
            print "$_\n" if (!$flows{$_});
        }
    ')
    flow=
    if [ -n "$flows" ]; then 
        gf_choose -var flow -header "Which flow to install?" -variants "$flows"
        gf_spacer
    fi
    if [ -n "$flow" ]; then
        update_file 1 "$GF_PROJECT_DIR" "blocks/$GF_BLOCK_NAME/$flow.gf" "
            $GF_REF_DIR/$flow.gf
        " "
            $GF_PROJECT_DIR/../*/blocks/*/$flow.gf
            $GF_BLOCK_DIR/../*/$flow.gf
            $GF_PROJECT_DIR/gflow/templates/*/blocks/*/$flow.gf
        "
    fi
fi

# Summary
gf_spacer
if [ -n "$NEW_FILES" ]; then
    gf_operation "New project files:"
    echo "$NEW_FILES" | sed -e 's/^/  /'
else
    gf_error "No project changes made"
    gf_spacer
fi
